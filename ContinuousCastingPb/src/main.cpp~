/**
 * @file main.cpp
 * See the AUTHORS or Authors.txt file
 */

/*
 * Copyright (C) 2017-2018 ULCO http://www.univ-litoral.fr
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <graph_manager.hpp>
#include <models.hpp>

#include <artis-star/common/RootCoordinator.hpp>

#include <solution.hpp>
#include <evalCC.hpp>

#include <chrono>
#include <fstream>
#include <iostream>
#include <time.h>
#include "RandomSearch.hpp"


using namespace cc;
using namespace artis::common;


int main()
{ 
    srand(time(NULL));
	// constants related to the dimension of the optimization problem 
    const unsigned int n_stack = 5;
    const unsigned int n_destination = 8;
    const unsigned int solution_size = n_destination + n_stack * n_destination * (n_destination - 1);

    // evaluation function from the Continuous Casting simulator
    	/*EvalCC eval;
	Solution stest;
	stest.resize(solution_size);
	eval(stest);
	std::cout << "Reussi" << std::endl;*/
	
   
	RandomSearch rs(solution_size);
	rs.run();

	Solution result; 
	result = rs.getSolution();

	std::cout << result.to_string() << std::endl;
    // Declaration of one solution of the optimization problem


    // solution for random selection: all stacks have the same preference 1
    //s.resize(solution_size,1);

    
    // evaluation of the solution
    //eval(s);


    // print the result
    //std::cout << s.to_string() << std::endl;
    
    /*

    GlobalParameters p;

    // score init to 1 (random selection)
    // when size = 0, depends only on the destination of slab
    // when size > 0, depends on size of stack, and destination of the top one
    p.preferences.resize(5 + 4 * 5 * 5, 1);

    artis::common::RootCoordinator <
        DoubleTime, artis::pdevs::Coordinator <
            DoubleTime,
            RootGraphManager,
            GlobalParameters >
        > rc(0, 4800, "root", p, artis::common::NoParameters());

    artis::common::Trace < DoubleTime >::trace().clear();
    rc.attachView("CC", new ::View());

    std::chrono::high_resolution_clock::time_point t0, t1;
    t0 = std::chrono::high_resolution_clock::now();

    rc.run();

    t1 = std::chrono::high_resolution_clock::now();
    auto dt = std::chrono::duration_cast <
        std::chrono::duration < double > >(t1 - t0).count();

    std::cout << "Simulation duration = " << dt << std::endl;

#ifdef WITH_TRACE_MODEL
    std::ofstream f("trace");

    f << artis::common::Trace <
        DoubleTime >::trace().elements().to_string() << std::endl;
    f.close();
#endif

    stat(rc);
    */
    return 0;
}
